generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum Role {
  Student
  Professor
}

enum Day {
  Monday
  Tuesday
  Wednesday
  Thursday
  Friday
  Saturday
  Sunday
}

model User {
  id            String       @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  email         String       @unique
  username      String
  firebaseId    String       @unique
  RollNo        String?      @unique
  Branch        String?
  role          Role
  courses       Enrollment[]
  questions     Question[]
  answers       Answer[]
  coursesTaught Course[]     @relation("ProfessorCourses")
}

model Course {
  id            String         @id @default(auto()) @map("_id") @db.ObjectId
  name          String
  code          String         @unique
  description   String?
  credits       Int?
  semester      Int?
  year          Int?
  users         Enrollment[]
  timetable     Timetable[]
  questions     Question[]
  announcements Announcement[]
  sessions      ClassSession[]
  professorId   String?        @db.ObjectId
  professor     User?          @relation("ProfessorCourses", fields: [professorId], references: [id])
}

model Enrollment {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  userId    String   @db.ObjectId
  courseId  String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  course    Course   @relation(fields: [courseId], references: [id])
  createdAt DateTime @default(now())
}

model Timetable {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String  @db.ObjectId
  course    Course  @relation(fields: [courseId], references: [id])
  dayOfWeek Day
  startTime String
  endTime   String
  location  String?
}

model Question {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId  String   @db.ObjectId
  course    Course   @relation(fields: [courseId], references: [id])
  userId    String   @db.ObjectId
  user      User     @relation(fields: [userId], references: [id])
  content   String
  createdAt DateTime @default(now())
  answers   Answer[]
}

model Answer {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  questionId String   @db.ObjectId
  question   Question @relation(fields: [questionId], references: [id])
  userId     String   @db.ObjectId
  user       User     @relation(fields: [userId], references: [id])
  content    String
  createdAt  DateTime @default(now())
}

model ClassSession {
  id         String    @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String    @db.ObjectId
  course     Course    @relation(fields: [courseId], references: [id])
  date       DateTime
  isCanceled Boolean   @default(false)
  canceledAt DateTime?
}

model Announcement {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  courseId   String   @db.ObjectId
  course     Course   @relation(fields: [courseId], references: [id])
  title      String
  content    String
  attachment String?
  createdAt  DateTime @default(now())
}
